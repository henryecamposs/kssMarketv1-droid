package com.kss.kssmarketv10.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kss.kssmarketv10.db.Empresa;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPRESA".
*/
public class EmpresaDao extends AbstractDao<Empresa, Long> {

    public static final String TABLENAME = "EMPRESA";

    /**
     * Properties of entity Empresa.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Contacto = new Property(1, String.class, "Contacto", false, "CONTACTO");
        public final static Property Direccion = new Property(2, String.class, "direccion", false, "DIRECCION");
        public final static Property Empresa = new Property(3, String.class, "empresa", false, "EMPRESA");
        public final static Property ImagenArchivo = new Property(4, String.class, "ImagenArchivo", false, "IMAGEN_ARCHIVO");
        public final static Property Nit = new Property(5, String.class, "nit", false, "NIT");
        public final static Property Rif = new Property(6, String.class, "rif", false, "RIF");
        public final static Property Telefonos = new Property(7, String.class, "telefonos", false, "TELEFONOS");
        public final static Property TelefonosContacto = new Property(8, String.class, "telefonosContacto", false, "TELEFONOS_CONTACTO");
        public final static Property EsActivo = new Property(9, Boolean.class, "esActivo", false, "ES_ACTIVO");
        public final static Property CodigoPostal = new Property(10, Integer.class, "codigoPostal", false, "CODIGO_POSTAL");
        public final static Property Id_Ciudad = new Property(11, Integer.class, "Id_Ciudad", false, "ID__CIUDAD");
        public final static Property Id_Estado = new Property(12, Integer.class, "id_Estado", false, "ID__ESTADO");
        public final static Property Id_idioma = new Property(13, Integer.class, "id_idioma", false, "ID_IDIOMA");
        public final static Property Id_Municipio = new Property(14, Integer.class, "id_Municipio", false, "ID__MUNICIPIO");
        public final static Property Id_Pais = new Property(15, Integer.class, "id_Pais", false, "ID__PAIS");
        public final static Property Id_Parroquia = new Property(16, Integer.class, "Id_Parroquia", false, "ID__PARROQUIA");
        public final static Property ID_tipoComercio = new Property(17, Integer.class, "ID_tipoComercio", false, "ID_TIPO_COMERCIO");
    };


    public EmpresaDao(DaoConfig config) {
        super(config);
    }
    
    public EmpresaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPRESA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"CONTACTO\" TEXT," + // 1: Contacto
                "\"DIRECCION\" TEXT NOT NULL ," + // 2: direccion
                "\"EMPRESA\" TEXT NOT NULL ," + // 3: empresa
                "\"IMAGEN_ARCHIVO\" TEXT," + // 4: ImagenArchivo
                "\"NIT\" TEXT," + // 5: nit
                "\"RIF\" TEXT NOT NULL ," + // 6: rif
                "\"TELEFONOS\" TEXT NOT NULL ," + // 7: telefonos
                "\"TELEFONOS_CONTACTO\" TEXT," + // 8: telefonosContacto
                "\"ES_ACTIVO\" INTEGER," + // 9: esActivo
                "\"CODIGO_POSTAL\" INTEGER," + // 10: codigoPostal
                "\"ID__CIUDAD\" INTEGER," + // 11: Id_Ciudad
                "\"ID__ESTADO\" INTEGER," + // 12: id_Estado
                "\"ID_IDIOMA\" INTEGER," + // 13: id_idioma
                "\"ID__MUNICIPIO\" INTEGER," + // 14: id_Municipio
                "\"ID__PAIS\" INTEGER," + // 15: id_Pais
                "\"ID__PARROQUIA\" INTEGER," + // 16: Id_Parroquia
                "\"ID_TIPO_COMERCIO\" INTEGER);"); // 17: ID_tipoComercio
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPRESA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Empresa entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Contacto = entity.getContacto();
        if (Contacto != null) {
            stmt.bindString(2, Contacto);
        }
        stmt.bindString(3, entity.getDireccion());
        stmt.bindString(4, entity.getEmpresa());
 
        String ImagenArchivo = entity.getImagenArchivo();
        if (ImagenArchivo != null) {
            stmt.bindString(5, ImagenArchivo);
        }
 
        String nit = entity.getNit();
        if (nit != null) {
            stmt.bindString(6, nit);
        }
        stmt.bindString(7, entity.getRif());
        stmt.bindString(8, entity.getTelefonos());
 
        String telefonosContacto = entity.getTelefonosContacto();
        if (telefonosContacto != null) {
            stmt.bindString(9, telefonosContacto);
        }
 
        Boolean esActivo = entity.getEsActivo();
        if (esActivo != null) {
            stmt.bindLong(10, esActivo ? 1L: 0L);
        }
 
        Integer codigoPostal = entity.getCodigoPostal();
        if (codigoPostal != null) {
            stmt.bindLong(11, codigoPostal);
        }
 
        Integer Id_Ciudad = entity.getId_Ciudad();
        if (Id_Ciudad != null) {
            stmt.bindLong(12, Id_Ciudad);
        }
 
        Integer id_Estado = entity.getId_Estado();
        if (id_Estado != null) {
            stmt.bindLong(13, id_Estado);
        }
 
        Integer id_idioma = entity.getId_idioma();
        if (id_idioma != null) {
            stmt.bindLong(14, id_idioma);
        }
 
        Integer id_Municipio = entity.getId_Municipio();
        if (id_Municipio != null) {
            stmt.bindLong(15, id_Municipio);
        }
 
        Integer id_Pais = entity.getId_Pais();
        if (id_Pais != null) {
            stmt.bindLong(16, id_Pais);
        }
 
        Integer Id_Parroquia = entity.getId_Parroquia();
        if (Id_Parroquia != null) {
            stmt.bindLong(17, Id_Parroquia);
        }
 
        Integer ID_tipoComercio = entity.getID_tipoComercio();
        if (ID_tipoComercio != null) {
            stmt.bindLong(18, ID_tipoComercio);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Empresa readEntity(Cursor cursor, int offset) {
        Empresa entity = new Empresa( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Contacto
            cursor.getString(offset + 2), // direccion
            cursor.getString(offset + 3), // empresa
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ImagenArchivo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nit
            cursor.getString(offset + 6), // rif
            cursor.getString(offset + 7), // telefonos
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // telefonosContacto
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // esActivo
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // codigoPostal
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Id_Ciudad
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // id_Estado
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // id_idioma
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // id_Municipio
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // id_Pais
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // Id_Parroquia
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // ID_tipoComercio
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Empresa entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setContacto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDireccion(cursor.getString(offset + 2));
        entity.setEmpresa(cursor.getString(offset + 3));
        entity.setImagenArchivo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRif(cursor.getString(offset + 6));
        entity.setTelefonos(cursor.getString(offset + 7));
        entity.setTelefonosContacto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEsActivo(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setCodigoPostal(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId_Ciudad(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setId_Estado(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setId_idioma(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setId_Municipio(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setId_Pais(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setId_Parroquia(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setID_tipoComercio(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Empresa entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Empresa entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
