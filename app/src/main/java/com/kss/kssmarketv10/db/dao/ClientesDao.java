package com.kss.kssmarketv10.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kss.kssmarketv10.db.Clientes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTES".
*/
public class ClientesDao extends AbstractDao<Clientes, Long> {

    public static final String TABLENAME = "CLIENTES";

    /**
     * Properties of entity Clientes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CI = new Property(1, String.class, "CI", false, "CI");
        public final static Property Nombres = new Property(2, String.class, "Nombres", false, "NOMBRES");
        public final static Property Categorias = new Property(3, String.class, "Categorias", false, "CATEGORIAS");
        public final static Property Pasaporte = new Property(4, String.class, "Pasaporte", false, "PASAPORTE");
        public final static Property Telefono = new Property(5, String.class, "telefono", false, "TELEFONO");
        public final static Property Telefono_movil = new Property(6, String.class, "telefono_movil", false, "TELEFONO_MOVIL");
        public final static Property Direccion = new Property(7, String.class, "direccion", false, "DIRECCION");
        public final static Property Apellidos = new Property(8, String.class, "Apellidos", false, "APELLIDOS");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property EsActivo = new Property(10, Boolean.class, "esActivo", false, "ES_ACTIVO");
        public final static Property EsEmpresa = new Property(11, Boolean.class, "esEmpresa", false, "ES_EMPRESA");
        public final static Property Id_estado = new Property(12, Integer.class, "id_estado", false, "ID_ESTADO");
        public final static Property Id_municipio = new Property(13, Integer.class, "id_municipio", false, "ID_MUNICIPIO");
        public final static Property Id_nacionalidad = new Property(14, Integer.class, "id_nacionalidad", false, "ID_NACIONALIDAD");
        public final static Property Id_parroquia = new Property(15, Integer.class, "id_parroquia", false, "ID_PARROQUIA");
        public final static Property Id_profesion = new Property(16, Integer.class, "id_profesion", false, "ID_PROFESION");
        public final static Property CodigoPostal = new Property(17, Integer.class, "codigoPostal", false, "CODIGO_POSTAL");
        public final static Property Id_ciudad = new Property(18, Integer.class, "id_ciudad", false, "ID_CIUDAD");
        public final static Property Id_tipoPago = new Property(19, Integer.class, "id_tipoPago", false, "ID_TIPO_PAGO");
    };


    public ClientesDao(DaoConfig config) {
        super(config);
    }
    
    public ClientesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENTES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"CI\" TEXT NOT NULL ," + // 1: CI
                "\"NOMBRES\" TEXT NOT NULL ," + // 2: Nombres
                "\"CATEGORIAS\" TEXT," + // 3: Categorias
                "\"PASAPORTE\" TEXT," + // 4: Pasaporte
                "\"TELEFONO\" TEXT," + // 5: telefono
                "\"TELEFONO_MOVIL\" TEXT," + // 6: telefono_movil
                "\"DIRECCION\" TEXT NOT NULL ," + // 7: direccion
                "\"APELLIDOS\" TEXT," + // 8: Apellidos
                "\"EMAIL\" TEXT NOT NULL ," + // 9: email
                "\"ES_ACTIVO\" INTEGER," + // 10: esActivo
                "\"ES_EMPRESA\" INTEGER," + // 11: esEmpresa
                "\"ID_ESTADO\" INTEGER," + // 12: id_estado
                "\"ID_MUNICIPIO\" INTEGER," + // 13: id_municipio
                "\"ID_NACIONALIDAD\" INTEGER," + // 14: id_nacionalidad
                "\"ID_PARROQUIA\" INTEGER," + // 15: id_parroquia
                "\"ID_PROFESION\" INTEGER," + // 16: id_profesion
                "\"CODIGO_POSTAL\" INTEGER," + // 17: codigoPostal
                "\"ID_CIUDAD\" INTEGER," + // 18: id_ciudad
                "\"ID_TIPO_PAGO\" INTEGER);"); // 19: id_tipoPago
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENTES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Clientes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getCI());
        stmt.bindString(3, entity.getNombres());
 
        String Categorias = entity.getCategorias();
        if (Categorias != null) {
            stmt.bindString(4, Categorias);
        }
 
        String Pasaporte = entity.getPasaporte();
        if (Pasaporte != null) {
            stmt.bindString(5, Pasaporte);
        }
 
        String telefono = entity.getTelefono();
        if (telefono != null) {
            stmt.bindString(6, telefono);
        }
 
        String telefono_movil = entity.getTelefono_movil();
        if (telefono_movil != null) {
            stmt.bindString(7, telefono_movil);
        }
        stmt.bindString(8, entity.getDireccion());
 
        String Apellidos = entity.getApellidos();
        if (Apellidos != null) {
            stmt.bindString(9, Apellidos);
        }
        stmt.bindString(10, entity.getEmail());
 
        Boolean esActivo = entity.getEsActivo();
        if (esActivo != null) {
            stmt.bindLong(11, esActivo ? 1L: 0L);
        }
 
        Boolean esEmpresa = entity.getEsEmpresa();
        if (esEmpresa != null) {
            stmt.bindLong(12, esEmpresa ? 1L: 0L);
        }
 
        Integer id_estado = entity.getId_estado();
        if (id_estado != null) {
            stmt.bindLong(13, id_estado);
        }
 
        Integer id_municipio = entity.getId_municipio();
        if (id_municipio != null) {
            stmt.bindLong(14, id_municipio);
        }
 
        Integer id_nacionalidad = entity.getId_nacionalidad();
        if (id_nacionalidad != null) {
            stmt.bindLong(15, id_nacionalidad);
        }
 
        Integer id_parroquia = entity.getId_parroquia();
        if (id_parroquia != null) {
            stmt.bindLong(16, id_parroquia);
        }
 
        Integer id_profesion = entity.getId_profesion();
        if (id_profesion != null) {
            stmt.bindLong(17, id_profesion);
        }
 
        Integer codigoPostal = entity.getCodigoPostal();
        if (codigoPostal != null) {
            stmt.bindLong(18, codigoPostal);
        }
 
        Integer id_ciudad = entity.getId_ciudad();
        if (id_ciudad != null) {
            stmt.bindLong(19, id_ciudad);
        }
 
        Integer id_tipoPago = entity.getId_tipoPago();
        if (id_tipoPago != null) {
            stmt.bindLong(20, id_tipoPago);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Clientes readEntity(Cursor cursor, int offset) {
        Clientes entity = new Clientes( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CI
            cursor.getString(offset + 2), // Nombres
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Categorias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Pasaporte
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // telefono
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telefono_movil
            cursor.getString(offset + 7), // direccion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Apellidos
            cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // esActivo
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // esEmpresa
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // id_estado
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // id_municipio
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // id_nacionalidad
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // id_parroquia
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // id_profesion
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // codigoPostal
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // id_ciudad
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // id_tipoPago
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Clientes entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCI(cursor.getString(offset + 1));
        entity.setNombres(cursor.getString(offset + 2));
        entity.setCategorias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPasaporte(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTelefono(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTelefono_movil(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDireccion(cursor.getString(offset + 7));
        entity.setApellidos(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.getString(offset + 9));
        entity.setEsActivo(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setEsEmpresa(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setId_estado(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setId_municipio(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setId_nacionalidad(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setId_parroquia(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setId_profesion(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setCodigoPostal(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setId_ciudad(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setId_tipoPago(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Clientes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Clientes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
