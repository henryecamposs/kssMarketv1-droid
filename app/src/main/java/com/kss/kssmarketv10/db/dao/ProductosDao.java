package com.kss.kssmarketv10.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kss.kssmarketv10.db.Productos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTOS".
*/
public class ProductosDao extends AbstractDao<Productos, Long> {

    public static final String TABLENAME = "PRODUCTOS";

    /**
     * Properties of entity Productos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CodigoAdicional = new Property(1, String.class, "CodigoAdicional", false, "CODIGO_ADICIONAL");
        public final static Property CodigoBarras = new Property(2, String.class, "CodigoBarras", false, "CODIGO_BARRAS");
        public final static Property CodigoInterno = new Property(3, String.class, "CodigoInterno", false, "CODIGO_INTERNO");
        public final static Property Producto = new Property(4, String.class, "Producto", false, "PRODUCTO");
        public final static Property Producto_DescripcionLarga = new Property(5, String.class, "Producto_DescripcionLarga", false, "PRODUCTO__DESCRIPCION_LARGA");
        public final static Property Producto_LinkWeb = new Property(6, String.class, "Producto_LinkWeb", false, "PRODUCTO__LINK_WEB");
        public final static Property CantidadUnidadVenta = new Property(7, Double.class, "cantidadUnidadVenta", false, "CANTIDAD_UNIDAD_VENTA");
        public final static Property MargenGananciaPrecio1 = new Property(8, Double.class, "MargenGananciaPrecio1", false, "MARGEN_GANANCIA_PRECIO1");
        public final static Property MargenGananciaPrecio2 = new Property(9, Double.class, "MargenGananciaPrecio2", false, "MARGEN_GANANCIA_PRECIO2");
        public final static Property MargenGananciaPrecio3 = new Property(10, Double.class, "MargenGananciaPrecio3", false, "MARGEN_GANANCIA_PRECIO3");
        public final static Property MedidaAlto = new Property(11, Double.class, "MedidaAlto", false, "MEDIDA_ALTO");
        public final static Property MedidaAncho = new Property(12, Double.class, "MedidaAncho", false, "MEDIDA_ANCHO");
        public final static Property MedidaLargo = new Property(13, Double.class, "MedidaLargo", false, "MEDIDA_LARGO");
        public final static Property MontoCostoPromedio = new Property(14, Double.class, "MontoCostoPromedio", false, "MONTO_COSTO_PROMEDIO");
        public final static Property MontoPrecio1 = new Property(15, double.class, "MontoPrecio1", false, "MONTO_PRECIO1");
        public final static Property MontoPrecio2 = new Property(16, Double.class, "MontoPrecio2", false, "MONTO_PRECIO2");
        public final static Property MontoPrecio3 = new Property(17, Double.class, "MontoPrecio3", false, "MONTO_PRECIO3");
        public final static Property MontoUltimoCosto = new Property(18, Double.class, "MontoUltimoCosto", false, "MONTO_ULTIMO_COSTO");
        public final static Property EsActivo = new Property(19, Boolean.class, "esActivo", false, "ES_ACTIVO");
        public final static Property EsCodigoAlterno = new Property(20, Boolean.class, "esCodigoAlterno", false, "ES_CODIGO_ALTERNO");
        public final static Property EsCompuesto = new Property(21, Boolean.class, "esCompuesto", false, "ES_COMPUESTO");
        public final static Property EsFavorito = new Property(22, Boolean.class, "esFavorito", false, "ES_FAVORITO");
        public final static Property EsGarantia = new Property(23, Boolean.class, "esGarantia", false, "ES_GARANTIA");
        public final static Property EsImportado = new Property(24, Boolean.class, "esImportado", false, "ES_IMPORTADO");
        public final static Property EsInventario = new Property(25, Boolean.class, "esInventario", false, "ES_INVENTARIO");
        public final static Property EsPideComentario = new Property(26, Boolean.class, "esPideComentario", false, "ES_PIDE_COMENTARIO");
        public final static Property EsPidePeso = new Property(27, Boolean.class, "esPidePeso", false, "ES_PIDE_PESO");
        public final static Property EsPidePrecio = new Property(28, Boolean.class, "esPidePrecio", false, "ES_PIDE_PRECIO");
        public final static Property EsPideTipoProducto = new Property(29, Boolean.class, "esPideTipoProducto", false, "ES_PIDE_TIPO_PRODUCTO");
        public final static Property EsUsoInterno = new Property(30, Boolean.class, "esUsoInterno", false, "ES_USO_INTERNO");
        public final static Property Id_familiaProducto = new Property(31, int.class, "id_familiaProducto", false, "ID_FAMILIA_PRODUCTO");
        public final static Property Id_Marca = new Property(32, Integer.class, "id_Marca", false, "ID__MARCA");
        public final static Property Id_Impuesto = new Property(33, Integer.class, "id_Impuesto", false, "ID__IMPUESTO");
        public final static Property Id_unidadMedida = new Property(34, Integer.class, "id_unidadMedida", false, "ID_UNIDAD_MEDIDA");
        public final static Property FechaCreacion = new Property(35, java.util.Date.class, "FechaCreacion", false, "FECHA_CREACION");
        public final static Property FechaUltimaCompra = new Property(36, java.util.Date.class, "FechaUltimaCompra", false, "FECHA_ULTIMA_COMPRA");
        public final static Property FechaUltimaModificacion = new Property(37, java.util.Date.class, "FechaUltimaModificacion", false, "FECHA_ULTIMA_MODIFICACION");
        public final static Property FechaUltimaVenta = new Property(38, java.util.Date.class, "FechaUltimaVenta", false, "FECHA_ULTIMA_VENTA");
    };


    public ProductosDao(DaoConfig config) {
        super(config);
    }
    
    public ProductosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"CODIGO_ADICIONAL\" TEXT," + // 1: CodigoAdicional
                "\"CODIGO_BARRAS\" TEXT NOT NULL ," + // 2: CodigoBarras
                "\"CODIGO_INTERNO\" TEXT NOT NULL ," + // 3: CodigoInterno
                "\"PRODUCTO\" TEXT NOT NULL ," + // 4: Producto
                "\"PRODUCTO__DESCRIPCION_LARGA\" TEXT," + // 5: Producto_DescripcionLarga
                "\"PRODUCTO__LINK_WEB\" TEXT," + // 6: Producto_LinkWeb
                "\"CANTIDAD_UNIDAD_VENTA\" REAL," + // 7: cantidadUnidadVenta
                "\"MARGEN_GANANCIA_PRECIO1\" REAL," + // 8: MargenGananciaPrecio1
                "\"MARGEN_GANANCIA_PRECIO2\" REAL," + // 9: MargenGananciaPrecio2
                "\"MARGEN_GANANCIA_PRECIO3\" REAL," + // 10: MargenGananciaPrecio3
                "\"MEDIDA_ALTO\" REAL," + // 11: MedidaAlto
                "\"MEDIDA_ANCHO\" REAL," + // 12: MedidaAncho
                "\"MEDIDA_LARGO\" REAL," + // 13: MedidaLargo
                "\"MONTO_COSTO_PROMEDIO\" REAL," + // 14: MontoCostoPromedio
                "\"MONTO_PRECIO1\" REAL NOT NULL ," + // 15: MontoPrecio1
                "\"MONTO_PRECIO2\" REAL," + // 16: MontoPrecio2
                "\"MONTO_PRECIO3\" REAL," + // 17: MontoPrecio3
                "\"MONTO_ULTIMO_COSTO\" REAL," + // 18: MontoUltimoCosto
                "\"ES_ACTIVO\" INTEGER," + // 19: esActivo
                "\"ES_CODIGO_ALTERNO\" INTEGER," + // 20: esCodigoAlterno
                "\"ES_COMPUESTO\" INTEGER," + // 21: esCompuesto
                "\"ES_FAVORITO\" INTEGER," + // 22: esFavorito
                "\"ES_GARANTIA\" INTEGER," + // 23: esGarantia
                "\"ES_IMPORTADO\" INTEGER," + // 24: esImportado
                "\"ES_INVENTARIO\" INTEGER," + // 25: esInventario
                "\"ES_PIDE_COMENTARIO\" INTEGER," + // 26: esPideComentario
                "\"ES_PIDE_PESO\" INTEGER," + // 27: esPidePeso
                "\"ES_PIDE_PRECIO\" INTEGER," + // 28: esPidePrecio
                "\"ES_PIDE_TIPO_PRODUCTO\" INTEGER," + // 29: esPideTipoProducto
                "\"ES_USO_INTERNO\" INTEGER," + // 30: esUsoInterno
                "\"ID_FAMILIA_PRODUCTO\" INTEGER NOT NULL ," + // 31: id_familiaProducto
                "\"ID__MARCA\" INTEGER," + // 32: id_Marca
                "\"ID__IMPUESTO\" INTEGER," + // 33: id_Impuesto
                "\"ID_UNIDAD_MEDIDA\" INTEGER," + // 34: id_unidadMedida
                "\"FECHA_CREACION\" INTEGER," + // 35: FechaCreacion
                "\"FECHA_ULTIMA_COMPRA\" INTEGER," + // 36: FechaUltimaCompra
                "\"FECHA_ULTIMA_MODIFICACION\" INTEGER," + // 37: FechaUltimaModificacion
                "\"FECHA_ULTIMA_VENTA\" INTEGER);"); // 38: FechaUltimaVenta
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTOS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Productos entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String CodigoAdicional = entity.getCodigoAdicional();
        if (CodigoAdicional != null) {
            stmt.bindString(2, CodigoAdicional);
        }
        stmt.bindString(3, entity.getCodigoBarras());
        stmt.bindString(4, entity.getCodigoInterno());
        stmt.bindString(5, entity.getProducto());
 
        String Producto_DescripcionLarga = entity.getProducto_DescripcionLarga();
        if (Producto_DescripcionLarga != null) {
            stmt.bindString(6, Producto_DescripcionLarga);
        }
 
        String Producto_LinkWeb = entity.getProducto_LinkWeb();
        if (Producto_LinkWeb != null) {
            stmt.bindString(7, Producto_LinkWeb);
        }
 
        Double cantidadUnidadVenta = entity.getCantidadUnidadVenta();
        if (cantidadUnidadVenta != null) {
            stmt.bindDouble(8, cantidadUnidadVenta);
        }
 
        Double MargenGananciaPrecio1 = entity.getMargenGananciaPrecio1();
        if (MargenGananciaPrecio1 != null) {
            stmt.bindDouble(9, MargenGananciaPrecio1);
        }
 
        Double MargenGananciaPrecio2 = entity.getMargenGananciaPrecio2();
        if (MargenGananciaPrecio2 != null) {
            stmt.bindDouble(10, MargenGananciaPrecio2);
        }
 
        Double MargenGananciaPrecio3 = entity.getMargenGananciaPrecio3();
        if (MargenGananciaPrecio3 != null) {
            stmt.bindDouble(11, MargenGananciaPrecio3);
        }
 
        Double MedidaAlto = entity.getMedidaAlto();
        if (MedidaAlto != null) {
            stmt.bindDouble(12, MedidaAlto);
        }
 
        Double MedidaAncho = entity.getMedidaAncho();
        if (MedidaAncho != null) {
            stmt.bindDouble(13, MedidaAncho);
        }
 
        Double MedidaLargo = entity.getMedidaLargo();
        if (MedidaLargo != null) {
            stmt.bindDouble(14, MedidaLargo);
        }
 
        Double MontoCostoPromedio = entity.getMontoCostoPromedio();
        if (MontoCostoPromedio != null) {
            stmt.bindDouble(15, MontoCostoPromedio);
        }
        stmt.bindDouble(16, entity.getMontoPrecio1());
 
        Double MontoPrecio2 = entity.getMontoPrecio2();
        if (MontoPrecio2 != null) {
            stmt.bindDouble(17, MontoPrecio2);
        }
 
        Double MontoPrecio3 = entity.getMontoPrecio3();
        if (MontoPrecio3 != null) {
            stmt.bindDouble(18, MontoPrecio3);
        }
 
        Double MontoUltimoCosto = entity.getMontoUltimoCosto();
        if (MontoUltimoCosto != null) {
            stmt.bindDouble(19, MontoUltimoCosto);
        }
 
        Boolean esActivo = entity.getEsActivo();
        if (esActivo != null) {
            stmt.bindLong(20, esActivo ? 1L: 0L);
        }
 
        Boolean esCodigoAlterno = entity.getEsCodigoAlterno();
        if (esCodigoAlterno != null) {
            stmt.bindLong(21, esCodigoAlterno ? 1L: 0L);
        }
 
        Boolean esCompuesto = entity.getEsCompuesto();
        if (esCompuesto != null) {
            stmt.bindLong(22, esCompuesto ? 1L: 0L);
        }
 
        Boolean esFavorito = entity.getEsFavorito();
        if (esFavorito != null) {
            stmt.bindLong(23, esFavorito ? 1L: 0L);
        }
 
        Boolean esGarantia = entity.getEsGarantia();
        if (esGarantia != null) {
            stmt.bindLong(24, esGarantia ? 1L: 0L);
        }
 
        Boolean esImportado = entity.getEsImportado();
        if (esImportado != null) {
            stmt.bindLong(25, esImportado ? 1L: 0L);
        }
 
        Boolean esInventario = entity.getEsInventario();
        if (esInventario != null) {
            stmt.bindLong(26, esInventario ? 1L: 0L);
        }
 
        Boolean esPideComentario = entity.getEsPideComentario();
        if (esPideComentario != null) {
            stmt.bindLong(27, esPideComentario ? 1L: 0L);
        }
 
        Boolean esPidePeso = entity.getEsPidePeso();
        if (esPidePeso != null) {
            stmt.bindLong(28, esPidePeso ? 1L: 0L);
        }
 
        Boolean esPidePrecio = entity.getEsPidePrecio();
        if (esPidePrecio != null) {
            stmt.bindLong(29, esPidePrecio ? 1L: 0L);
        }
 
        Boolean esPideTipoProducto = entity.getEsPideTipoProducto();
        if (esPideTipoProducto != null) {
            stmt.bindLong(30, esPideTipoProducto ? 1L: 0L);
        }
 
        Boolean esUsoInterno = entity.getEsUsoInterno();
        if (esUsoInterno != null) {
            stmt.bindLong(31, esUsoInterno ? 1L: 0L);
        }
        stmt.bindLong(32, entity.getId_familiaProducto());
 
        Integer id_Marca = entity.getId_Marca();
        if (id_Marca != null) {
            stmt.bindLong(33, id_Marca);
        }
 
        Integer id_Impuesto = entity.getId_Impuesto();
        if (id_Impuesto != null) {
            stmt.bindLong(34, id_Impuesto);
        }
 
        Integer id_unidadMedida = entity.getId_unidadMedida();
        if (id_unidadMedida != null) {
            stmt.bindLong(35, id_unidadMedida);
        }
 
        java.util.Date FechaCreacion = entity.getFechaCreacion();
        if (FechaCreacion != null) {
            stmt.bindLong(36, FechaCreacion.getTime());
        }
 
        java.util.Date FechaUltimaCompra = entity.getFechaUltimaCompra();
        if (FechaUltimaCompra != null) {
            stmt.bindLong(37, FechaUltimaCompra.getTime());
        }
 
        java.util.Date FechaUltimaModificacion = entity.getFechaUltimaModificacion();
        if (FechaUltimaModificacion != null) {
            stmt.bindLong(38, FechaUltimaModificacion.getTime());
        }
 
        java.util.Date FechaUltimaVenta = entity.getFechaUltimaVenta();
        if (FechaUltimaVenta != null) {
            stmt.bindLong(39, FechaUltimaVenta.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Productos readEntity(Cursor cursor, int offset) {
        Productos entity = new Productos( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CodigoAdicional
            cursor.getString(offset + 2), // CodigoBarras
            cursor.getString(offset + 3), // CodigoInterno
            cursor.getString(offset + 4), // Producto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Producto_DescripcionLarga
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Producto_LinkWeb
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // cantidadUnidadVenta
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // MargenGananciaPrecio1
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // MargenGananciaPrecio2
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // MargenGananciaPrecio3
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // MedidaAlto
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // MedidaAncho
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // MedidaLargo
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // MontoCostoPromedio
            cursor.getDouble(offset + 15), // MontoPrecio1
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // MontoPrecio2
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // MontoPrecio3
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // MontoUltimoCosto
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // esActivo
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // esCodigoAlterno
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // esCompuesto
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // esFavorito
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // esGarantia
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // esImportado
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // esInventario
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // esPideComentario
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0, // esPidePeso
            cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0, // esPidePrecio
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0, // esPideTipoProducto
            cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0, // esUsoInterno
            cursor.getInt(offset + 31), // id_familiaProducto
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // id_Marca
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // id_Impuesto
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // id_unidadMedida
            cursor.isNull(offset + 35) ? null : new java.util.Date(cursor.getLong(offset + 35)), // FechaCreacion
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // FechaUltimaCompra
            cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)), // FechaUltimaModificacion
            cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)) // FechaUltimaVenta
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Productos entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCodigoAdicional(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCodigoBarras(cursor.getString(offset + 2));
        entity.setCodigoInterno(cursor.getString(offset + 3));
        entity.setProducto(cursor.getString(offset + 4));
        entity.setProducto_DescripcionLarga(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProducto_LinkWeb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCantidadUnidadVenta(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setMargenGananciaPrecio1(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setMargenGananciaPrecio2(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setMargenGananciaPrecio3(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setMedidaAlto(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setMedidaAncho(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setMedidaLargo(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setMontoCostoPromedio(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setMontoPrecio1(cursor.getDouble(offset + 15));
        entity.setMontoPrecio2(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setMontoPrecio3(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setMontoUltimoCosto(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setEsActivo(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setEsCodigoAlterno(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setEsCompuesto(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setEsFavorito(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setEsGarantia(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setEsImportado(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setEsInventario(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setEsPideComentario(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setEsPidePeso(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
        entity.setEsPidePrecio(cursor.isNull(offset + 28) ? null : cursor.getShort(offset + 28) != 0);
        entity.setEsPideTipoProducto(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
        entity.setEsUsoInterno(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
        entity.setId_familiaProducto(cursor.getInt(offset + 31));
        entity.setId_Marca(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setId_Impuesto(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setId_unidadMedida(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setFechaCreacion(cursor.isNull(offset + 35) ? null : new java.util.Date(cursor.getLong(offset + 35)));
        entity.setFechaUltimaCompra(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setFechaUltimaModificacion(cursor.isNull(offset + 37) ? null : new java.util.Date(cursor.getLong(offset + 37)));
        entity.setFechaUltimaVenta(cursor.isNull(offset + 38) ? null : new java.util.Date(cursor.getLong(offset + 38)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Productos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Productos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
